#!/usr/bin/env python3

import os
import sys

PAGE_SIZE = 4096

# TODO: Take from stdint.
PTR_SIZE = 8

def items_in_arena(item_size):
  # We want to find out how many items can fit in this page, minus the header.
  items_and_bitset_size = PAGE_SIZE - 2 * PTR_SIZE - 8

  # There's probably a closed form formula for this, but it would get weird with
  # the `ceil(i mod 8)`.
  # TODO: Is it worth moving this to a binary search?
  i = 0

  while True:
    if item_size * i + ((i + 7) // 8) > items_and_bitset_size:
        break
    i += 1
  return i - 1


def main():
  page_size_log = PAGE_SIZE.bit_length() - 1
  if 1 << page_size_log != PAGE_SIZE:
    print('Invalid page size, must be a power of 2')
    sys.exit(1)

  nums = [items_in_arena(1 << k) for k in range(page_size_log)]
  #efficiency = [(1 << s, ((1 << s) * n) / 4096) for s, n in enumerate(nums)]

  gen_folder = '../src/gen'
  if not os.path.exists(gen_folder):
    os.mkdir(gen_folder)

  with open(gen_folder + '/malloc-config.h', 'w+') as f:
    f.write('// DO NOT EDIT!\n')
    f.write('// THIS WAS GENERATED BY `malloc-config.py`\n\n')

    f.write('#pragma once\n\n')

    f.write('#define PAGE_SIZE {}U\n'.format(PAGE_SIZE))
    f.write('#define PAGE_SIZE_LOG_2 {}U\n\n'.format(page_size_log))

    f.write('#define NUM_ITEMS {{{}}}\n'.format(', '.join(map(str, nums))))

if __name__ == '__main__':
  main()
